# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py310"
<<<<<<<
=======
line-length = 120
exclude = [
  ".git,",
  "__pycache__",
>>>>>>>
line-length = 120
extend-exclude=[
    "__pycache__",
    "build",
    "tools/**",
]
lint.select = [
    "ALL",
]
lint.extend-ignore = [
    "ANN001", # Missing type annotation for function argument
    "ANN002", # Missing type annotation for variable
    "ANN003", # Missing type annotation for keyword
    "ANN201", # Missing return type annotation for public function
    "ANN202", # Missing return type annotation for private function
    "ANN205", # Missing return type annotation for staticmethod
    "ANN206", # Missing return type annotation for classmethod
    "COM812", # May cause conflicts when used with the formatter
    "C901", # Function exceeds acceptable complexity limits
    "D200", # One-line docstring should fit on one line
    "D205", # 1 blank line required between summary line and description
    "D400", # First line should end with a period
    "D401", # First line should be in imperative mood
    "D404", # First word of the docstring should not be "This"
    "ISC001", # May cause conflicts when used with the formatter
]

[lint.per-file-ignores]
"examples/*.py" = [
    "B018", # Not print but display
    "D400", # First line should end with a period, question mark, or exclamation point
    "ERA001", # Commented out code
    "INP001", # Implicit namespace package
    "T201", # Use print
]
"docs/conf.py" = [
    "D100", # Missing docstring in public module
    "INP001", # conf.py is part of an implicit namespace package
]
"setup.py" = [
    "D100", # Missing docstring in public module
]
<<<<<<<
"test_*.py" = [
    "D100", # Missing docstring in public module
    "D103", # Missing docstring in public function
    "N806", # in function should be lowercase
    "PLR2004", # Magic value used in comparison
    "S101", # Use of `assert` detected
=======

[lint]
select = [
  "E",
  "F",
  "W",
  "UP",
  "PT",
]
extend-ignore = [
  # pycodestyle (E, W)
  "E501", # ignore line length will use a formatter instead
  # pyupgrade (UP)
  "UP038", # Use | in isinstance - not compatible with models and is slower
  # pytest (PT)
  "PT001", # Always use pytest.fixture()
  "PT004", # Fixtures which don't return anything should have leading _
  "PT023", # Always use () on pytest decorators
  # flake8-pie (PIE)
  "PIE808", # Disallow passing 0 as the first argument to range
  # flake8-use-pathlib (PTH)
  "PTH123", # open() should be replaced by Path.open()
  # Ruff (RUF)
  "RUF003", # Ignore ambiguous quote marks, doesn't allow ' in comments
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "RUF013", # PEP 484 prohibits implicit `Optional`
  "RUF015", # Prefer `next(iter(...))` over single element slice
>>>>>>>
]
<<<<<<<
"sunpy_soar/version.py" = [
    "D100", # Missing docstring in public module
=======

[lint.per-file-ignores]
"setup.py" = [
  "INP001", # File is part of an implicit namespace package.
]
"conftest.py" = [
  "INP001", # File is part of an implicit namespace package.
]
"docs/conf.py" = [
  "E402" # Module imports not at top of file
>>>>>>>
]
<<<<<<<
"sunpy_soar/conftest.py" = [
    "D100", # Missing docstring in public module
=======
"docs/*.py" = [
  "INP001", # File is part of an implicit namespace package.
]
"examples/**.py" = [
  "T201", # allow use of print in examples
  "INP001", # File is part of an implicit namespace package.
]
"__init__.py" = [
  "E402", # Module level import not at top of cell
  "F401", # Unused import
  "F403", # from {name} import * used; unable to detect undefined names
  "F405", # {name} may be undefined, or defined from star imports
]
"test_*.py" = [
  "E402", # Module level import not at top of cell
>>>>>>>
]

[lint.pydocstyle]
convention = "numpy"

[format]
docstring-code-format = true
indent-style = "space"
quote-style = "double"
